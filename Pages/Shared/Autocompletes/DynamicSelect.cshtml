@using Microsoft.AspNetCore.Mvc.ModelBinding
@using Microsoft.AspNetCore.Mvc.TagHelpers

@model DynamicSelect

@{
  var isInvalid = ViewData.ModelState.GetFieldValidationState("Text") == ModelValidationState.Invalid;
  var items = Model.Opened ? await Model.Items.Value : Array.Empty<SelectItem>();
  var maxIndex = items.Count > 0 ? items.Count - 1 : 0;
}

<div class="flex flex-col">
  <div class="join group bg-base-100" x-init="$data.index = 0; @DateTime.Now.Ticks">
    <input
      asp-for="Text"
      placeholder="@Model.Placeholder"
      autocomplete="off"

      bind:input.debounce.500ms
      on:blur="@(() => Model.Blur())"

      x-ref="input"
      x-on:focus="$el.select()"
      x-on:keydown.escape.prevent="@(Model.Opened ? "$refs.back.click()" : null)"
      x-on:keydown.down.prevent="@(Model.Opened ? $"index = Math.min(index + 1, {maxIndex})" : "$refs.open.click()")"
      x-on:keydown.up.prevent="index = Math.max(index - 1, 0)"
      x-on:keydown.enter.prevent="@(Model.Opened ? "$refs[index].click()" : null)"
      class="shadow-sm input input-sm pr-0 input-bordered w-full join-item @(isInvalid ? "input-error" : null)" />

    @if (Model.Value != null)
    {
      <button
        tabindex="-1"
        type="button"
        on:click="@(() => Model.Clear())"
        class="btn btn-outline btn-sm join-item border-l-base-100 border-base-content/20 px-0 hidden group-hover:block">
        <partial name="Icons/CrossIcon" />
      </button>
    }

    <div class="relative" onmousedown="event.preventDefault()">
      <button
        type="button"
        on:click="@(() => Model.Open())"
        tabindex="-1"
        x-ref="open"
        x-on:mousedown="$refs.input.focus();$refs.input.select();"
        class="btn btn-sm btn-outline border-base-content/20 join-item">
        <div class="w-2.5">
          <partial name="Icons/DownIcon" />
        </div>
      </button>

      @if (Model.Opened)
      {
        if (items.Count != 0)
        {
          <div class="hidden group-focus-within:block">
            <div on:click="@(() => Model.Close())" x-ref="back" class="fixed left-0 top-0 bottom-0 right-0"></div>
            <ul class="init-component absolute menu menu-sm p-0 bg-base-100 rounded w-72 max-h-40 border border-base-300 shadow overflow-y-auto flex-nowrap right-0 z-50" x-init="$el.scrollIntoViewIfNeeded(false)">
              @for (var i = 0; i < items.Count; i++)
              {
                <li>
                  <a
                    tabindex="-1"
                    on:click="@(() => Model.Select(items[i].Key))"
                    x-ref="@i"
                    :class="{ 'bg-base-200': index === @i }"
                    x-effect="index === @i && $el.scrollIntoViewIfNeeded(false)"
                    class="rounded-none border border-solid border-base-100">
                    @if (Model.ItemPartial != null)
                    {
                      @(await Html.PartialAsync(Model.ItemPartial, items[i]))
                    }
                    else
                    {
                      @items[i].Text
                    }
                  </a>
                </li>
              }
            </ul>
          </div>
        }
      }
    </div>
  </div>
</div>